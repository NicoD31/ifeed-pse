import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})

/**
  Holds enums. The Enums are safed in the backend and must me received with a get request. This servie is held as a singleton
*/
export class EnumService {
  /**Holds the enum of feedbackmodes*/
  private FEEDBACKMODES: JSON[];
  /**Holds the enum of historymodes*/
  private HISTORYMODES: JSON[];
  /**Holds the enum of lables*/
  private LABELS: JSON[];

  private feedbackModeKeys = ['fbMode0', 'fbMode1', 'fbMode2'];
  private historyModeKeys = ['hMode0', 'hMode1', 'hMode2'];
  private labelKeys = ['label0', 'label1', 'label2'];
  private datasetTypeKeys = ['type0', 'type1'];

  /**
    returns the feedmackmodes
    @return the feedbackmodes
  */
  getFeedbackModes(): JSON[] {
    let tmp = [];
    for (let i = 0; i < this.feedbackModeKeys.length; i++) {
      tmp.push(JSON.parse(localStorage.getItem(this.feedbackModeKeys[i])));
    }
    return tmp;
  }

  /**
    returns the historymodes
    @return the historymodes
  */
  getHistoryModes(): JSON[] {
    let tmp = [];
    for (let i = 0; i < this.historyModeKeys.length; i++) {
      tmp.push(JSON.parse(localStorage.getItem(this.historyModeKeys[i])));
    }
    return tmp;
  }

  /**
    returns the labels
    @return the  labels
  */
  getLabels(): JSON[] {
    let tmp = [];
    for (let i = 0; i < this.labelKeys.length; i++) {
      tmp.push(JSON.parse(localStorage.getItem(this.labelKeys[i])));
    }
    return tmp;
  }

  /**
    returns the datasetTypes
    @return the datasetTypes
  */
  getDatasetTypes(): JSON[] {
    let tmp = [];
    for (let i = 0; i < this.datasetTypeKeys.length; i++) {
      tmp.push(JSON.parse(localStorage.getItem(this.datasetTypeKeys[i])));
    }
    return tmp;
  }

  /**
    sets the feedbackmodes
    @param fbModes the feetbackmodes
  */
  setFeedbackModes(fbModes: JSON[]) {
    for (let i = 0; i < this.feedbackModeKeys.length; i++) {
      localStorage.setItem(this.feedbackModeKeys[i], JSON.stringify(fbModes[i]));
    }
  }

  /**
    sets the historymodes
    @param hModes the historymodes
  */
  setHistoryModes(hModes: JSON[]) {
    for (let i = 0; i < this.historyModeKeys.length; i++) {
      localStorage.setItem(this.historyModeKeys[i], JSON.stringify(hModes[i]));
    }
  }

  /**
    sets the labels
    @param labels the labels
  */
  setLabels(labels: JSON[]) {
    for (let i = 0; i < this.labelKeys.length; i++) {
      localStorage.setItem(this.labelKeys[i], JSON.stringify(labels[i]));
    }
  }

  /**
    sets the datasetTypes
    @param dsTypes the datasetTypes
  */
  setDatasetTypes(dsTypes: JSON[]) {
    for (let i = 0; i < this.datasetTypeKeys.length; i++) {
      localStorage.setItem(this.datasetTypeKeys[i], JSON.stringify(dsTypes[i]));
    }
  }

  /**
    Converts a label known to the OcalAPI ('inlier', 'outlier') to the corresponding userLabel ('Lin', 'Lout').
    Returns the input there is no translation available.
    @param label label known to the OcalAPI ('inlier', 'outlier')
    @return corresponding userLabel ('Lin', 'Lout')
  */
  labelToUserLabel(label: string): string {
    const labels = this.getLabels();
    for (let i = 0; i < labels.length; i++) {
      if (labels[i]['value']['final'] === label) {
        return labels[i]['value']['user'];
      }
    }
    return label;
  }

  /**
    Converts a userLabel ('Lin', 'Lout') to a label known to the OcalAPI ('inlier', 'outlier').
    Will return 'NOT DEFINED', when trying to convert 'U'. Returns the imput if there is n available translation.
    @param userLabel Label generated by a user ('Lin', 'Lout')
    @return label known to the OcalAPI ('inlier', 'outlier')
  */
  userLabeltoLabel(userLabel: string): string {
    const labels = this.getLabels();
    for (let i = 0; i < labels.length; i++) {
      if (labels[i]['value']['user'] === userLabel) {
        return labels[i]['value']['final'];
      }
    }
    return userLabel;
  }

  constructor() { }
}
